workflow:
  rules:
    - if: $CI_COMMIT_BRANCH  == "dev"
    - if: $CI_COMMIT_BRANCH == "staging"
    - if: $CI_COMMIT_BRANCH == "release"
    - if: $CI_COMMIT_BRANCH == "github"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_PIPELINE_SOURCE == "web"

stages:
- build
- test
- manual
- deploy

.defaults:
  tags:
    - docker
    - cloud

python_build:
  extends: .defaults
  stage: build
  image:  ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/python:3.12
  script:
    - >
      if [[ "${CI_COMMIT_REF_NAME}" =~ ^(release$|dev|staging) ]]; then
        sed -i "s#\"#rc${CI_PIPELINE_ID}\"#2" futureexpert/__about__.py
      elif [[ "${CI_COMMIT_REF_NAME}" =~ ^github$ ]]; then
        # do nothing final release version already in futureexpert/__about__.py
        :
      else
        sed -i "s#\"#\.dev${CI_PIPELINE_ID}\"#2" futureexpert/__about__.py
      fi
    - pip install --user build
    - python -m build
  artifacts:
    paths:
    - "dist/"
    expire_in: 1 week

import-formatting:
  stage: test
  extends: .defaults
  image: ${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID}
  script:
    - isort --check-only .
  needs: [docker_build]

static-typing:
  stage: test
  extends: .defaults
  image: ${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID}
  script:
    - mypy futureexpert
  needs: [docker_build]

unit-tests:
  stage: test
  extends: .defaults
  image: ${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID}
  variables:
    FUTURE_PW: $CI_TEST_PW
    FUTURE_USER: $CI_TEST_USER
    FUTURE_ENVIRONMENT: development
  script:
    - pytest tests/unit_tests/.
  needs: [docker_build]

sonarqube:
  extends: .defaults
  stage: test
  image:
    name: sonarsource/sonar-scanner-cli
    entrypoint: [""]
  variables:
    GIT_STRATEGY: fetch
    GIT_DEPTH: 0
  script:
    - sonar-scanner -Dsonar.qualitygate.wait=true
  needs: [python_build]

notebook execution (required):
  stage: manual
  extends: .defaults
  image: ${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID}
  variables:
    FUTURE_PW: $CI_TEST_PW
    FUTURE_USER: $CI_TEST_USER
    FUTURE_ENVIRONMENT: development
  script:
    - sed -i "s/'TBD'/'66ea6e1d38cb720ea1a2e44a'/g" notebooks/getting_started.ipynb
    - sed -i "s/'TBD'/'66ea6e1d38cb720ea1a2e44a'/g" notebooks/checkin_configuration_options.ipynb
    - for notebook in $(./generate-notebook-list.sh); do jupyter nbconvert --to notebook --execute --inplace "$notebook"; done
  needs: [docker_build]
  rules:
    - if: $CI_COMMIT_BRANCH  == "dev"
      when: on_success
    - if: $CI_COMMIT_BRANCH =~ /^(release$|release.+|staging|github)/
      when: never
    - when: manual
      allow_failure: false
  
notebook-result-validation:
  stage: manual
  extends: .defaults
  image: ${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID}
  variables:
    FUTURE_PW: $CI_TEST_PW
    FUTURE_USER: $CI_TEST_USER
    FUTURE_ENVIRONMENT: development
  script:
    - pytest tests/notebook_execution/.
  needs: ["notebook execution (required)"]
  rules:
    - if: $CI_COMMIT_BRANCH =~ /^(release$|release.+|staging|github)/
      when: never
    - when: on_success
      allow_failure: false

api-docs:
  stage: build
  extends: .defaults
  image: ${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID}
  script:
    - pip install pdoc3
    - python docs/make.py --export-directory docs/
    - mv ./docs/futureexpert/* ./docs/
  artifacts:
    paths:
    - "docs/"
    expire_in: 1 week
  needs: [docker_build]

python_deploy:
  stage: deploy
  extends: .defaults
  image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/python:3.12
  script:
    - pip config set global.index-url ${PROGNOSTICA_PYPI}
    - pip install -U twine
    - python -m twine check dist/*
    - TWINE_PASSWORD=${CI_JOB_TOKEN} TWINE_USERNAME=gitlab-ci-token python -m twine upload --repository-url ${CI_PROJECT_PYPI} dist/* --verbose
  when: manual

docker_build:
  stage: build
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker build -t ${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID} .
    - docker push ${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID}
    - syft ${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID} -o cyclonedx-json=sbom.json -o syft-table
    - grype sbom:sbom.json
  tags:
    - shell
    - cloud
  artifacts:
    paths:
      - sbom.json
  needs: [python_build]

docker_deploy:
  stage: deploy
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull ${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID}
    - docker tag ${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID} ${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_NAME}
    - docker push ${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_NAME}
  tags:
    - shell
    - cloud

e2e-deploy-dev:
  stage: deploy
  tags:
    - shell
    - cloud
  script: |
    git clone https://${GIT_USER_E2E}:${GIT_TOKEN_E2E}@git.prognostica.de/prognostica/future/futureapp/monitoring/future-end-to-end-test-deployment.git
    cd future-end-to-end-test-deployment/overlays/dev
    git config user.email "ci@gitlab.prognostica.de"
    git config user.name "Gitlab CI"
    git pull
    sed -i "/- name: future-expert-e2e-test/{n;s/newTag: .*/newTag: \"${CI_PIPELINE_ID}\"/;}" kustomization.yaml
    git diff
    git commit -am "[dev] CI update to image ${CI_PIPELINE_ID}"
    git push
  environment: dev
  rules:
    - if: $CI_COMMIT_BRANCH == "dev"
      when: on_success
    - when: manual
      allow_failure: true

e2e-deploy-staging:
  stage: deploy
  tags:
    - shell
    - cloud
  script: |
    git clone https://${GIT_USER_E2E}:${GIT_TOKEN_E2E}@git.prognostica.de/prognostica/future/futureapp/monitoring/future-end-to-end-test-deployment.git
    cd future-end-to-end-test-deployment/overlays/staging
    git config user.email "ci@gitlab.prognostica.de"
    git config user.name "Gitlab CI"
    sed -i "/- name: future-expert-e2e-test/{n;s/newTag: .*/newTag: \"${CI_PIPELINE_ID}\"/;}" kustomization.yaml
    git diff
    git commit -am "[staging] CI update to image ${CI_PIPELINE_ID}"
    git push
  environment: staging
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"
      when: on_success
    - when: never

e2e-deploy-prod:
  stage: deploy
  tags:
    - shell
    - cloud
  script: |
    git clone https://${GIT_USER_E2E}:${GIT_TOKEN_E2E}@git.prognostica.de/prognostica/future/futureapp/monitoring/future-end-to-end-test-deployment.git
    cd future-end-to-end-test-deployment/overlays/prod
    git config user.email "ci@gitlab.prognostica.de"
    git config user.name "Gitlab CI"
    sed -i "/- name: future-expert-e2e-test/{n;s/newTag: .*/newTag: \"${CI_PIPELINE_ID}\"/;}" kustomization.yaml
    git diff
    git commit -am "[prod] CI update to image ${CI_PIPELINE_ID}"
    git push
  environment: prod
  rules:
    - if: $CI_COMMIT_BRANCH == "github" # let's not use prod branch here to ensure that the github branch is kept up-to-date with the productive version
      when: on_success
    - when: never
